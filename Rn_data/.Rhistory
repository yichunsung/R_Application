"/",
sep = ""
)
url_SingleGame
url_SingleGame[1]
url_SingleGame[2]
Game_singlePage <-read_html(url_SingleGame[1])
data_forGameDeveloper <- Game_singlePage %>%
html_nodes(., xpath = xpath_GAme_developer)%>%
html_text
xpath_GAme_developer <- "//table[@class='table table-bordered table-hover table-dark']/tbody/tr[4]/td[2]"
Game_singlePage <-read_html(url_SingleGame[1])
data_forGameDeveloper <- Game_singlePage %>%
html_nodes(., xpath = xpath_GAme_developer)%>%
html_text
Game_singlePage
data_forGameDeveloper
Game_singlePage <-read_html(url_SingleGame[2])
data_forGameDeveloper <- Game_singlePage %>%
html_nodes(., xpath = xpath_GAme_developer)%>%
html_text
Game_singlePage2 <-read_html(url_SingleGame[3])
data_forGameDeveloper <- Game_singlePage %>%
html_nodes(., xpath = xpath_GAme_developer)%>%
html_text
a <- 1
a <- ()
a <- c()
a <- c(a,1)
a <- c(a,2)
data_forGameDeveloper <- c()
for(i in 1:length(url_SingleGame)){
Game_singlePage <-read_html(url_SingleGame[i])
data_forGameDeveloper <-c(data_forGameDeveloper, Game_singlePage %>%
html_nodes(., xpath = xpath_GAme_developer)%>%
html_text)
}
for(i in 1:5){
Game_singlePage <-read_html(url_SingleGame[i])
data_forGameDeveloper <-c(data_forGameDeveloper, Game_singlePage %>%
html_nodes(., xpath = xpath_GAme_developer)%>%
html_text)
}
data_forGameDeveloper
Sys.setlocale(category = "LC_ALL", locale = "cht")
url <- "https://steamdb.info/graph/"
xpathSteamDB <-paste(paste("//td[", c(2:6), sep = ""), "]", sep = "")
steamdbData<-data.frame()
# get data from Steamdb
dataurl <-read_html(url)
data_forSteamdb <- dataurl %>%
html_nodes(., xpath = xpathSteamDB[1])%>%
html_text
steamdbData <- cbind(data_forSteamdb)
for(i in 1:length(xpathSteamDB) ){
data_forSteamdb <- dataurl %>%
html_nodes(., xpath = xpathSteamDB[i+1])%>%
html_text
steamdbData <- cbind(steamdbData, data_forSteamdb)
}
steamdbData <- as.data.frame(steamdbData)
names(steamdbData) <- c("id", "Name", "currentPlayer", "24Hpeak","allTimepeak")
# get developer data
url_SingleGame <-paste(
paste("https://steamdb.info/app/", steamdbData$id, sep = ""),
"/",
sep = ""
)
# every Game Developer Xpath
xpath_GAme_developer <- "//table[@class='table table-bordered table-hover table-dark']/tbody/tr[4]/td[2]"
data_forGameDeveloper <- c()
for(i in 1:10){   #length(url_SingleGame)
Game_singlePage <-read_html(url_SingleGame[i])
data_forGameDeveloper <-c(data_forGameDeveloper, Game_singlePage %>%
html_nodes(., xpath = xpath_GAme_developer)%>%
html_text)
}
data_forGameDeveloper
data_forGameDeveloper <- c()
for(i in 2:100){   #length(url_SingleGame)
Game_singlePage <-read_html(url_SingleGame[i])
data_forGameDeveloper <-c(data_forGameDeveloper, Game_singlePage %>%
html_nodes(., xpath = xpath_GAme_developer)%>%
html_text)
}
data_forGameDeveloper
library(kriging)
library(magrittr)
library(httr)
library(rvest)
library(stringr)
library(ggplot2)
library(plotly)
library(leaflet)
library(reshape2)
library(knitr)
library(shiny)
library(RJSONIO)
library(RCurl)
library(jsonlite)
library(httr)
library(XML)
library(stringr)
library(raster)
setwd('c:/Taiwan-CWB-Data')
Sys.setlocale(category = "LC_ALL", locale = "")
getDataformCWB <- function(station, timerange1, timerange2, iterm){
# ---------- input Targat Station ---------- #
# Load Station List
stationList <- read.csv("data/new_Station_List.csv")
inputStationName <- c(station) # "Location"
# ---------- input Date ---------- #
fromdate <- as.Date(timerange1) # "2017-01-06"
todate <- as.Date(timerange2) # "2017-01-06"
date <- seq.Date(fromdate, todate, "day")
lengthDate <- as.numeric(length(date))
lengthDatep <- as.numeric(lengthDate+1)
# ---------- URL ---------- #
url_1 <- "http://e-service.cwb.gov.tw/HistoryDataQuery/DayDataController.do?command=viewMain&station="
url_2 <- "&stname=%25E7%25AB%25B9%25E6%259D%25B1&datepicker="
url_1_1 <- paste(url_1, stationList$id, sep = "")
url_all <- paste(url_1_1, url_2, sep = "")
stationListnew <- cbind(stationList, url_all)
substation <- data.frame(subset(stationListnew, stationListnew$engName == inputStationName))
subdataframe <-data.frame(date=date, urldate = paste(substation$url_all, date ,sep=""))
# ---------- Xpath ---------- #
inputxpathName <- c(iterm) # "ex: press"
# Rain
xpathrain <- "//table[@id='MyTable']/tbody/tr/td[11]" # Xpath for rain data
# Hum
xpathHum <- "//table[@id='MyTable']/tbody/tr/td[6]" # Xpath for RH data
# Tem
xpathTtem <- "//table[@id='MyTable']/tbody/tr/td[4]" # Xpath for Temperature data
# Press
xpathPres <- "//table[@id='MyTable']/tbody/tr/td[2]" # Xpath for StnPres data
XpathName <- c("Rain", "Hum", "Tem", "Press")
xpathurl <- c(xpathrain, xpathHum, xpathTtem, xpathPres)
xpathList <- data.frame(XpathName, xpathurl)
xpathselect_dataframe <- subset(xpathList, xpathList$XpathName == inputxpathName)
xpathSelect_result <- as.vector(xpathselect_dataframe$xpathurl)
#-----
hr24 <- data.frame(Hour=1:24)
for (i in 1:lengthDate){
urlhtml <- as.vector(subdataframe$urldate[i])# as.vector(date_dataFrame$urldate[1])
# doc <- read_html(urls)
datadoc <-read_html(urlhtml)# read_html(as.vector(date_dataFrame$urldate[1]))
data <- datadoc %>%
html_nodes(., xpath = xpathSelect_result)%>%
html_text
data_renew <- str_trim(sub("<U+00A0>",replacement ="",data)) # Delete something we don't need
hr24 <-cbind(hr24, data_renew)
}
names(hr24)[2:lengthDatep] <- as.vector(as.factor(date))
hr24_all <- melt(hr24, id=c("Hour") ) # Let them for one column
names(hr24_all) <- c("hour", "date", "data")
POStime <- as.POSIXct(paste(hr24_all$date, hr24_all$hour, sep = " "), "%Y-%m-%d %H", tz="GMT")
resultTable <- data.frame(time=POStime, data= hr24_all$data)
names(resultTable)[2] <-c(iterm)
return(resultTable)
}
liststation <- c("Zhudong")
Zhudong_Press <- getDataformCWB("Zhudong", "2017-03-14", "2017-03-19", "Press")
Zhudong_Hum <- getDataformCWB("Zhudong", "2017-03-14", "2017-03-19", "Hum")
Zhudong_Tem <- getDataformCWB("Zhudong", "2017-03-14", "2017-03-19", "Tem")
Zhudong_Rain <- getDataformCWB("Zhudong", "2017-03-14", "2017-03-19", "Rain")
Hutoupi_Press <- getDataformCWB("Hutoupi", "2017-03-14", "2017-03-19", "Press")
Hutoupi_Hum <- getDataformCWB("Hutoupi", "2017-03-14", "2017-03-19", "Hum")
Hutoupi_Tem <- getDataformCWB("Hutoupi", "2017-03-14", "2017-03-19", "Tem")
Hutoupi_Rain <- getDataformCWB("Hutoupi", "2017-03-14", "2017-03-19", "Rain")
Chiaoshi_Press <- getDataformCWB("Chiaoshi", "2017-03-14", "2017-03-19", "Press")
Chiaoshi_Hum <- getDataformCWB("Chiaoshi", "2017-03-14", "2017-03-19", "Hum")
Chiaoshi_Tem <- getDataformCWB("Chiaoshi", "2017-03-14", "2017-03-19", "Tem")
Chiaoshi_Rain <- getDataformCWB("Chiaoshi", "2017-03-14", "2017-03-19", "Rain")
Beiliao_Press <- getDataformCWB("Beiliao", "2017-03-14", "2017-03-19", "Press")
Beiliao_Hum <- getDataformCWB("Beiliao", "2017-03-14", "2017-03-19", "Hum")
Beiliao_Tem <- getDataformCWB("Beiliao", "2017-03-14", "2017-03-19", "Tem")
Beiliao_Rain <- getDataformCWB("Beiliao", "2017-03-14", "2017-03-19", "Rain")
write.csv(Zhudong_Press, "c://Taiwan-CWB-Data/writeCSV/C0D560_竹東_Zhudong_Press.csv")
write.csv(Zhudong_Hum, "c://Taiwan-CWB-Data/writeCSV/C0D560_竹東_Zhudong_Hum.csv")
write.csv(Zhudong_Tem, "c://Taiwan-CWB-Data/writeCSV/C0D560_竹東_Zhudong_Tem.csv")
write.csv(Zhudong_Rain, "c://Taiwan-CWB-Data/writeCSV/C0D560_竹東_Zhudong_Rain.csv")
write.csv(Hutoupi_Press, "c://Taiwan-CWB-Data/writeCSV/Hutoupi_Press.csv")
write.csv(Hutoupi_Hum, "c://Taiwan-CWB-Data/writeCSV/Hutoupi_Hum.csv")
write.csv(Hutoupi_Tem, "c://Taiwan-CWB-Data/writeCSV/Hutoupi_Tem.csv")
write.csv(Hutoupi_Rain, "c://Taiwan-CWB-Data/writeCSV/Hutoupi_Rain.csv")
write.csv(Beiliao_Press, "c://Taiwan-CWB-Data/writeCSV/Beiliao_Press.csv")
write.csv(Beiliao_Hum, "c://Taiwan-CWB-Data/writeCSV/Beiliao_Hum.csv")
write.csv(Beiliao_Tem, "c://Taiwan-CWB-Data/writeCSV/Beiliao_Tem.csv")
write.csv(Beiliao_Rain, "c://Taiwan-CWB-Data/writeCSV/Beiliao_Rain.csv")
write.csv(Chiaoshi_Press, "c://Taiwan-CWB-Data/writeCSV/Chiaoshi_Press.csv")
write.csv(Chiaoshi_Hum, "c://Taiwan-CWB-Data/writeCSV/Chiaoshi_Hum.csv")
write.csv(Chiaoshi_Tem, "c://Taiwan-CWB-Data/writeCSV/Chiaoshi_Tem.csv")
write.csv(Chiaoshi_Rain, "c://Taiwan-CWB-Data/writeCSV/Chiaoshi_Rain.csv")
setwd('c:/R_Application/Rn_data')
Sys.setlocale(category = "LC_ALL", locale = "cht")
rawData <- read.csv("data/rndata.csv")
View(rawData)
RnTimeToCONC <- data.frame(
time = as.POSIXct(rawData$time, "%Y/%m/%d %H:%M:%S", tz = "GMT"),
Rn = as.numeric(rawData$Radon)
)
View(RnTimeToCONC)
View(rawData)
RnTimeToCONC <- data.frame(
time = as.POSIXct(rawData$time, "%Y/%m/%d %H:%M", tz = "GMT"),
Rn = as.numeric(rawData$Radon)
)
View(RnTimeToCONC)
rainfall <- data.frame(
time = as.POSIXct(rawData$c0U600礁溪.time, "%Y/%m/%d %H:%M", tz = "GMT"),
rf = as.numeric(rawData$c0U600hourly.rf)
)
Rn_plot <- plot_ly(data = RnTimeToCONC,
x = RnTimeToCONC$time,
y = RnTimeToCONC$Rn,
type = "scatter",
mode = "markers+lines")
RF_plot <- plot_ly(data = rainfall,
x = rainfall$time,
y = rainfall$rf,
type = "bar",
color = "red")
Rn_plot
Rn_plot <- plot_ly(data = RnTimeToCONC,
x = RnTimeToCONC$time,
y = RnTimeToCONC$Rn,
type = "scatter",
mode = "lines")
Rn_plot
RF_plot
View(Hutoupi_Tem)
View(rainfall)
summary(rainfall$rf)
rain$rf
rainfall$rf
rainfall <- data.frame(
time = as.POSIXct(rawData$c0U600礁溪.time, "%Y/%m/%d %H:%M", tz = "GMT"),
rf = as.numeric(subset(rawData, rawData$c0U600hourly.rf >= 0)$rf)
)
rainfall <- data.frame(
time = as.POSIXct(subset(rawData, rawData$c0U600hourly.rf >= 0)$c0U600礁溪.time,
"%Y/%m/%d %H:%M",
tz = "GMT"),
rf = as.numeric(subset(rawData, rawData$c0U600hourly.rf >= 0)$rf)
)
rainfall <- data.frame(
time = as.POSIXct(subset(rawData, rawData$c0U600hourly.rf >= 0)[[1]],
"%Y/%m/%d %H:%M",
tz = "GMT"),
rf = as.numeric(subset(rawData, rawData$c0U600hourly.rf >= 0)[[2]])
)
View(rainfall)
View(rainfall)
View(rawData)
rawData[[20]]
rainfall <- data.frame(
time = as.POSIXct(subset(rawData, rawData$c0U600hourly.rf >= 0)[[20]],
"%Y/%m/%d %H:%M",
tz = "GMT"),
rf = as.numeric(subset(rawData, rawData$c0U600hourly.rf >= 0)[[21]])
)
View(rainfall)
RF_plot <- plot_ly(data = rainfall,
x = rainfall$time,
y = rainfall$rf,
type = "bar",
color = "red")
RF_plot
Rn_compare_RF_plot <- subplot(Rn_plot, RF_plot, nrows = 2, shareX = RnTimeToCONC$time)
Rn_compare_RF_plot
Rn_compare_RF_plot <- subplot(Rn_plot, RF_plot, nrows = 2, shareX = TRUE)
Rn_compare_RF_plot
format_RnTTime <- format(RnTimeToCONC$time, format = "%Y-%m-%d %H")
format_RnTTime
RnTimeToCONC <- cbind(RnTimeToCONC, FormatTime = format_RnTTime)
View(RnTimeToCONC)
View(RnTimeToCONC)
summary(RnTimeToCONC$FormatTime)
dateCat <- names(summary(RnTimeToCONC$FormatTime))
dateCat
summary(RnTimeToCONC$FormatTime)
dateCat <- names(summary(RnTimeToCONC$FormatTime, maxium=99999))
dateCat <- names(summary(RnTimeToCONC$FormatTime, maxsum=99999))
dateCat
dateCat <- names(summary(RnTimeToCONC$FormatTime, maxsum=length(RnTimeToCONC$FormatTime)))
dateCat
dateCat[[1]]
dateCat[[1]]
Beiliao_Press <- getDataformCWB("Beiliao", "2017-03-20", "2017-03-21", "Press")
Beiliao_Hum <- getDataformCWB("Beiliao", "2017-03-20", "2017-03-21", "Hum")
Beiliao_Tem <- getDataformCWB("Beiliao", "2017-03-20", "2017-03-21", "Tem")
Beiliao_Rain <- getDataformCWB("Beiliao", "2017-03-20", "2017-03-21", "Rain")
dateCat
View(RnTimeToCONC)
subset(RnTimeToCONC, RnTimeToCONC$FormatTime == dateCat[[1]])
subDate <- subset(RnTimeToCONC, RnTimeToCONC$FormatTime == dateCat[[1]])
View(subDate)
mean(subDate$Rn)
View(subDate)
dateCat
Rn_mean <- c()
Rn_maen <- c(Rn_maen, mean(subDate$Rn))
Rn_maen <- c(Rn_mean, mean(subDate$Rn))
subDate <- subset(RnTimeToCONC, RnTimeToCONC$FormatTime == dateCat[[2]])
Rn_maen <- c(Rn_mean, mean(subDate$Rn))
subDate <- subset(RnTimeToCONC, RnTimeToCONC$FormatTime == dateCat[[3]])
Rn_mean <- c(Rn_mean, mean(subDate$Rn))
subDate <- subset(RnTimeToCONC, RnTimeToCONC$FormatTime == dateCat[[3]])
Rn_mean <- c(Rn_mean, mean(subDate$Rn))
Rn_mean <- c()
Rn_mean <- c()
Rn_mean <- c()
for(i in 1:length(dateCat)){
subDate <- subset(RnTimeToCONC, RnTimeToCONC$FormatTime == dateCat[[i]])
Rn_mean <- c(Rn_mean, mean(subDate$Rn))
}
Rn_mean
averagePerHour <- data.frame(time, Rn_mean)
averagePerHour <- data.frame(time=dateCat, Rn_mean)
View(averagePerHour)
View(averagePerHour)
View(rainfall)
View(rawData)
View(rainfall)
averagePerHour <- data.frame(time=as.POSIXct(dateCat, "%Y/%m/%d %H", tz="GMT"), Rn_mean)
View(averagePerHour)
averagePerHour <- data.frame(time=as.POSIXct(dateCat, "%Y-%m-%d %H", tz="GMT"), Rn_mean)
View(averagePerHour)
View(rainfall)
subRainFallTime <- subset(rainfall, rainfall$time==averagePerHour$time[[1]])
View(subRainFallTime)
RainfallCompareRn <- c()
for(i in 1:length(averagePerHour$time)){
subRainFallTime <- subset(rainfall, rainfall$time==averagePerHour$time[[i]])
RainfallCompareRn <- c(RainfallCompareRn, subRainFallTime$rf)
}
RainfallCompareRn
averagePerHour <- cbind(averagePerHour, RainfallCompareRn)
newRainfalltoRn <- merge(averagePerHour, rainfall, by=averagePerHour$time)
newRainfalltoRn <- merge(averagePerHour, rainfall, by='time')
View(newRainfalltoRn)
RFtoRn_plot <- plot_ly(data = newRainfalltoRn,
x = ~newRainfalltoRn$rf,
y = ~newRainfalltoRn$Rn_mean,
type = "scatter")
RFtoRn_plot
norfRn <- subset(newRainfalltoRn, newRainfalltoRn$rf > 0)
View(norfRn)
RFtoRn_plot <- plot_ly(data = norfRn,
x = ~norfRn$rf,
y = ~norfRn$Rn_mean,
type = "scatter",
mode = "markers")
RFtoRn_plot
norfRn <- subset(newRainfalltoRn, newRainfalltoRn$rf >= 10)
RFtoRn_plot <- plot_ly(data = norfRn,
x = ~norfRn$rf,
y = ~norfRn$Rn_mean,
type = "scatter",
mode = "markers")
RFtoRn_plot
norfRn <- subset(newRainfalltoRn, newRainfalltoRn$rf >= 20)
RFtoRn_plot <- plot_ly(data = norfRn,
x = ~norfRn$rf,
y = ~norfRn$Rn_mean,
type = "scatter",
mode = "markers")
RFtoRn_plot
norfRn <- subset(newRainfalltoRn, newRainfalltoRn$rf >= 0) # Select rf >20 mm
RFtoRn_plot <- plot_ly(data = norfRn,
x = ~norfRn$rf,
y = ~norfRn$Rn_mean,
type = "scatter",
mode = "markers")
RFtoRn_plot
View(rawData)
Temp <- data.frame(
time = as.POSIXct(subset(rawData, rawData$c0U600hourly.rf >= 0)[[20]],
"%Y/%m/%d %H:%M",
tz = "GMT"),
rf = as.numeric(subset(rawData, rawData$c0U600hourly.rf >= 0)[[23]])
)
View(Temp)
newTemptoRn <- merge(averagePerHour, Temp, by='time')
Temp <- data.frame(
time = as.POSIXct(subset(rawData, rawData$c0U600hourly.rf >= 0)[[20]],
"%Y/%m/%d %H:%M",
tz = "GMT"),
tem = as.numeric(subset(rawData, rawData$c0U600hourly.rf >= 0)[[23]])
)
newTemptoRn <- merge(averagePerHour, Temp, by='time')
TemptoRn_plot <- plot_ly(data = newTemptoRn,
x = ~newTemptoRn$tem,
y = ~newTemptoRn$Rn_mean,
type = "scatter",
mode = "markers")
TemptoRn_plot
View(newTemptoRn)
Temp <- data.frame(
time = as.POSIXct(rawData$c0U600礁溪.time,
"%Y/%m/%d %H:%M",
tz = "GMT"),
tem = as.numeric(rawData$air.Temp.)
)
newTemptoRn <- merge(averagePerHour, Temp, by='time')
TemptoRn_plot <- plot_ly(data = newTemptoRn,
x = ~newTemptoRn$tem,
y = ~newTemptoRn$Rn_mean,
type = "scatter",
mode = "markers")
TemptoRn_plot
View(Temp)
rawData$air.Temp.
summary(rawData$air.Temp.)
Temp <- data.frame(
time = as.POSIXct(subset(rawData, rawData$air.Temp. >= 0)[[20]],
"%Y/%m/%d %H:%M",
tz = "GMT"),
tem = as.numeric(subset(rawData, rawData$air.Temp. >= 0)[[23]])
)
View(Temp)
Temp <- data.frame(
time = as.POSIXct(subset(rawData, rawData$air.Temp. >= 0)[[20]],
"%Y/%m/%d %H:%M",
tz = "GMT"),
tem = as.numeric(subset(rawData, rawData$air.Temp. >= 0)[[23]])
)
Temp <- data.frame(
time = as.POSIXct(subset(rawData, rawData$air.Temp. >= 0)[[20]],
"%Y/%m/%d %H:%M",
tz = "GMT"),
tem = as.numeric(subset(rawData, rawData$air.Temp. >= 0)[[23]])
)
Temp <- data.frame(
time = as.POSIXct(subset(rawData, rawData$air.Temp. >= 0)[[20]],
"%Y/%m/%d %H:%M",
tz = "GMT"),
tem = as.numeric(subset(rawData, rawData$air.Temp. >= 0)[[23]])
)
as.numeric(rawData$air.Temp.)
Temp <- data.frame(
time = as.POSIXct(subset(rawData, as.numeric(as.vector(rawData$air.Temp.)) >= 0)[[20]],
"%Y/%m/%d %H:%M",
tz = "GMT"),
tem = as.numeric(subset(rawData, as.numeric(as.vector(rawData$air.Temp.)) >= 0)[[23]])
)
as.numeric(as.vector(rawData$air.Temp.))
View(Temp)
Temp <- data.frame(
time = as.POSIXct(subset(rawData, as.numeric(as.vector(rawData$air.Temp.)) >= 0)[[20]],
"%Y/%m/%d %H:%M",
tz = "GMT"),
tem = subset(rawData, as.numeric(as.vector(rawData$air.Temp.)) >= 0)
)
View(Temp)
Temp <- data.frame(
time = as.POSIXct(subset(rawData, as.numeric(as.vector(rawData$air.Temp.)) >= 0)[[20]],
"%Y/%m/%d %H:%M",
tz = "GMT"),
tem = as.numeric(subset(rawData, as.numeric(as.vector(rawData$air.Temp.)) >= 0)[[23]])
)
View(Temp)
as.numeric(as.vector(rawData$air.Temp.))
subset(rawData, as.numeric(as.vector(rawData$air.Temp.)) >= 0)[[23]]
Temp <- data.frame(
time = as.POSIXct(subset(rawData, as.numeric(as.vector(rawData$air.Temp.)) >= 0)[[20]],
"%Y/%m/%d %H:%M",
tz = "GMT"),
tem = as.numeric(as.vector((subset(rawData, as.numeric(as.vector(rawData$air.Temp.)) >= 0)[[23]])))
)
View(Temp)
View(rawData)
Temp <- data.frame(
time = as.POSIXct(subset(rawData, as.numeric(as.vector(rawData$air.Temp.)) >= 0)[[20]],
"%Y/%m/%d %H:%M",
tz = "GMT"),
tem = 10*as.numeric(as.vector((subset(rawData, as.numeric(as.vector(rawData$air.Temp.)) >= 0)[[23]])))
)
View(Temp)
newTemptoRn <- merge(averagePerHour, Temp, by='time')
View(newTemptoRn)
TemptoRn_plot <- plot_ly(data = newTemptoRn,
x = ~newTemptoRn$tem,
y = ~newTemptoRn$Rn_mean,
type = "scatter",
mode = "markers")
TemptoRn_plot
deleteErorrTem <- subset(newTemptoRn, newTemptoRn$temp >= 40)
View(deleteErorrTem)
deleteErorrTem <- subset(newTemptoRn, newTemptoRn$tem >= 40)
View(deleteErorrTem)
View(deleteErorrTem)
deleteErorrTem <- subset(newTemptoRn, newTemptoRn$tem <= 40)
TemptoRn_plot <- plot_ly(data = deleteErorrTem,
x = ~deleteErorrTem$tem,
y = ~deleteErorrTem$Rn_mean,
type = "scatter",
mode = "markers")
TemptoRn_plot
RFtoRn_plot <- plot_ly(data = norfRn,
x = ~norfRn$rf,
y = ~norfRn$Rn_mean,
type = "scatter",
mode = "markers")
RFtoRn_plot
data1 <- data.frame(data=c("A1", "A2","A3","B1","B2","B3"))
data2 <- data.frame(data=c("A1", "B1","C1","D1","E2","F3"))
data1comparedata2 <- merge (data1, data2, by='data')
View(data1comparedata2)
summary(data1comparedata2)
data3 <- data.frame(data=c("A1", "R1","C1","D1","E2","F3"))
data1comparedata2 <- merge (data1, data2, data3, by='data')
