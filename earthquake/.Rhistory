addCircles(lng = ~krigingDataFrame$x,
lat = ~krigingDataFrame$y,
opacity= 0,
weight = 1000,
fillOpacity = 0.1,
radius =100,
color=~quantilePalette(krigingDataFrame$pred)
)%>%
addCircles(lng = ~CO2ConcSF$lng,
lat = ~CO2ConcSF$lat,
opacity= 0,
weight= 10,
radius=30,
fillOpacity = 1,
stroke=FALSE)%>%
addLegend(position="bottomright",
pal = quantilePalette,
values = ~krigingDataFrame$pred,
opacity = 1,
title="CO2 Conc.")
CO2ConcMap2
View(krigingDataFrame)
krigingDataFrame<-subset(krigingDataFrame, krigingDataFrame$y<=25.222 & krigingDataFrame$x>=121.5859)
krigingDataFrame <- krigingList$map
krigingDataFrame<-subset(krigingDataFrame, krigingDataFrame$y<=25.222 & krigingDataFrame$x>=121.5859)
krigingDataFrame <- krigingList$map
krigingDataFrame<-subset(krigingDataFrame, krigingDataFrame$y<=25.222 & krigingDataFrame$x>=121.5859)
CO2ConcMap2 <- leaflet(data = krigingDataFrame) %>%
setView(lng=121.5812,
lat=25.20781,
zoom = 14) %>%
addProviderTiles("Esri.WorldImagery") %>%
addCircles(lng = ~krigingDataFrame$x,
lat = ~krigingDataFrame$y,
opacity= 0,
weight = 1000,
fillOpacity = 0.1,
radius =100,
color=~quantilePalette(krigingDataFrame$pred)
)%>%
addCircles(lng = ~CO2ConcSF$lng,
lat = ~CO2ConcSF$lat,
opacity= 0,
weight= 10,
radius=30,
fillOpacity = 1,
stroke=FALSE)%>%
addLegend(position="bottomright",
pal = quantilePalette,
values = ~krigingDataFrame$pred,
opacity = 1,
title="CO2 Conc.")
CO2ConcMap2
krigingDataFrame <- krigingList$map
krigingDataFrame<-subset(krigingDataFrame, krigingDataFrame$y<=25.222 || krigingDataFrame$x>=121.5859)
krigingDataFrame<-subset(krigingDataFrame, krigingDataFrame$y<=25.222 | krigingDataFrame$x>=121.5859)
krigingDataFrame <- krigingList$map
krigingDataFrame<-subset(krigingDataFrame, krigingDataFrame$y<=25.222 | krigingDataFrame$x>=121.5859)
CO2ConcPlotly <- plot_ly(krigingDataFrame, z = ~krigingDataFrame$pred, x = ~krigingDataFrame$x, y = ~krigingDataFrame$y, colors = colorRamp(c("lightblue", "red")), type = "heatmap")
CO2ConcPlotly
CO2ConcMap2 <- leaflet(data = krigingDataFrame) %>%
setView(lng=121.5812,
lat=25.20781,
zoom = 14) %>%
addProviderTiles("Esri.WorldImagery") %>%
addCircles(lng = ~krigingDataFrame$x,
lat = ~krigingDataFrame$y,
opacity= 0,
weight = 1000,
fillOpacity = 0.1,
radius =100,
color=~quantilePalette(krigingDataFrame$pred)
)%>%
addCircles(lng = ~CO2ConcSF$lng,
lat = ~CO2ConcSF$lat,
opacity= 0,
weight= 10,
radius=30,
fillOpacity = 1,
stroke=FALSE)%>%
addLegend(position="bottomright",
pal = quantilePalette,
values = ~krigingDataFrame$pred,
opacity = 1,
title="CO2 Conc.")
CO2ConcMap2
Sys.setlocale(category = "LC_ALL", locale = "cht")
xpathp <- "//td[3]"
url <- "https://steamdb.info/graph/"
for (i in 1:lengthDate){
# doc <- read_html(urls)
datadoc <-read_html(url)# read_html(as.vector(date_dataFrame$urldate[1]))
data <- datadoc %>%
html_nodes(., xpath = xpathp)%>%
html_text
}
for (i in 1:100){
# doc <- read_html(urls)
datadoc <-read_html(url)# read_html(as.vector(date_dataFrame$urldate[1]))
data <- datadoc %>%
html_nodes(., xpath = xpathp)%>%
html_text
}
library(kriging)
library(magrittr)
library(httr)
library(rvest)
library(stringr)
library(ggplot2)
library(plotly)
library(leaflet)
library(reshape2)
library(knitr)
library(shiny)
library(RJSONIO)
library(RCurl)
library(jsonlite)
library(httr)
library(XML)
library(stringr)
library(raster)
for (i in 1:100){
# doc <- read_html(urls)
datadoc <-read_html(url)# read_html(as.vector(date_dataFrame$urldate[1]))
data <- datadoc %>%
html_nodes(., xpath = xpathp)%>%
html_text
}
# doc <- read_html(urls)
datadoc <-read_html(url)# read_html(as.vector(date_dataFrame$urldate[1]))
data <- datadoc %>%
html_nodes(., xpath = xpathp)%>%
html_text
data
dataurl <-read_html(url)
data_gameName <- datadoc %>%
html_nodes(., xpath = xpath_GameName)%>%
html_text
xpath_GameName <- "//td[3]"
data_gameName <- datadoc %>%
html_nodes(., xpath = xpath_GameName)%>%
html_text
no <- c(2:6)
xpathall <-paste(paste(xpath_1, no, sep = ""), xpath_2, sep = "")
xpath_1 <- "/td["
xpath_2 <- "]"
xpathall <-paste(paste(xpath_1, no, sep = ""), xpath_2, sep = "")
xpathall
xpath_1 <- "//td["
xpathall <-paste(paste(xpath_1, no, sep = ""), xpath_2, sep = "")
xpathall[1]
xpathall[2]
length(xpathall)
xpathall <-paste(paste(xpath_1, c(2:6), sep = ""), xpath_2, sep = "")
steamdbData<-data.frame()
steamdbData<- cbind(steamdbData, data_gameName)
testdataframe <- data.frame[1](data_gameName)
testdataframe <- data.frame[1=data_gameName]
testdataframe <- data.frame[.,data_gameName]
testdataframe <- data.frame[,data_gameName]
steamdbData[1]<-data_gameName
steamdbData[1]
steamdbData[0]
steamdbData[0] <- data_gameName
steamdbData = rbind(steamdbData)
steamdbData = rbind(data_gameName)
View(steamdbData)
steamdbData = cbind(data_gameName)
View(steamdbData)
steamdbData <- cbind(data_gameName)
View(steamdbData)
steamdbData<-data.frame()
steamdbData <- cbind(data_gameName)
View(steamdbData)
steamdbData<-data.frame()
steamdbData<-data.frame()
for(i in 1:length(xpathall) ){
data_forSteamdb <- datadoc %>%
html_nodes(., xpath = xpathall[i])%>%
html_text
steamdbData <- cbind(data_forSteamdb)
}
names(steamdbData) <- c("id", "Name", "currentPlayer", "24Hpeak","allTimepeak")
View(steamdbData)
steamdbData<-data.frame()
steamdbData <- cbind(data_forSteamdb)
steamdbData<-data.frame()
data_forSteamdb <- datadoc %>%
html_nodes(., xpath = xpathall[1])%>%
html_text
steamdbData <- cbind(data_forSteamdb)
for(i in 1:length(xpathall) ){
data_forSteamdb <- datadoc %>%
html_nodes(., xpath = xpathall[i+1])%>%
html_text
steamdbData <- cbind(steamdbData, data_forSteamdb)
}
names(steamdbData) <- c("id", "Name", "currentPlayer", "24Hpeak","allTimepeak")
View(steamdbData)
Sys.setlocale(category = "LC_ALL", locale = "cht")
url <- "https://steamdb.info/graph/"
xpath_1 <- "//td["
xpath_2 <- "]"
xpathall <-paste(paste(xpath_1, c(2:6), sep = ""), xpath_2, sep = "")
dataurl <-read_html(url)
steamdbData<-data.frame()
data_forSteamdb <- dataurl %>%
html_nodes(., xpath = xpathall[1])%>%
html_text
steamdbData <- cbind(data_forSteamdb)
for(i in 1:length(xpathall) ){
data_forSteamdb <- dataurl %>%
html_nodes(., xpath = xpathall[i+1])%>%
html_text
steamdbData <- cbind(steamdbData, data_forSteamdb)
}
names(steamdbData) <- c("id", "Name", "currentPlayer", "24Hpeak","allTimepeak")
View(steamdbData)
Sys.setlocale(category = "LC_ALL", locale = "cht")
url <- "https://steamdb.info/graph/"
xpathSteamDB <-paste(paste("//td[", c(2:6), sep = ""), "]", sep = "")
steamdbData<-data.frame()
# get data from Steamdb
dataurl <-read_html(url)
data_forSteamdb <- dataurl %>%
html_nodes(., xpath = xpathSteamDB[1])%>%
html_text
steamdbData <- cbind(data_forSteamdb)
for(i in 1:length(xpathSteamDB) ){
data_forSteamdb <- dataurl %>%
html_nodes(., xpath = xpathSteamDB[i+1])%>%
html_text
steamdbData <- cbind(steamdbData, data_forSteamdb)
}
names(steamdbData) <- c("id", "Name", "currentPlayer", "24Hpeak","allTimepeak")
urlSingleGame <- "https://steamdb.info/app/730/"
xpath_price_line <-  "//tr/td[@class='price-line']"
SingleGamedataurl <-read_html(urlSingleGame)
Single_game_data_forSteamdb <- SingleGamedataurl %>%
html_nodes(., xpath = xpath_price_line)%>%
html_text
Single_game_data_forSteamdb
is.data.frame(steamdbData)
as.data.frame(steamdbData)
steamdbData <- as.data.frame(steamdbData)
View(steamdbData)
View(steamdbData)
names(steamdbData) <- c("id", "Name", "currentPlayer", "24Hpeak","allTimepeak")
url_SingleGame <-paste(
paste("https://steamdb.info/app/730/", steamdbData$id, sep = ""),
"/",
sep = ""
)
url_SingleGame
url_SingleGame <-paste(
paste("https://steamdb.info/app/", steamdbData$id, sep = ""),
"/",
sep = ""
)
url_SingleGame <-paste(
paste("https://steamdb.info/app/", steamdbData$id, sep = ""),
"/",
sep = ""
)
url_SingleGame
url_SingleGame[1]
url_SingleGame[2]
Game_singlePage <-read_html(url_SingleGame[1])
data_forGameDeveloper <- Game_singlePage %>%
html_nodes(., xpath = xpath_GAme_developer)%>%
html_text
xpath_GAme_developer <- "//table[@class='table table-bordered table-hover table-dark']/tbody/tr[4]/td[2]"
Game_singlePage <-read_html(url_SingleGame[1])
data_forGameDeveloper <- Game_singlePage %>%
html_nodes(., xpath = xpath_GAme_developer)%>%
html_text
Game_singlePage
data_forGameDeveloper
Game_singlePage <-read_html(url_SingleGame[2])
data_forGameDeveloper <- Game_singlePage %>%
html_nodes(., xpath = xpath_GAme_developer)%>%
html_text
Game_singlePage2 <-read_html(url_SingleGame[3])
data_forGameDeveloper <- Game_singlePage %>%
html_nodes(., xpath = xpath_GAme_developer)%>%
html_text
a <- 1
a <- ()
a <- c()
a <- c(a,1)
a <- c(a,2)
data_forGameDeveloper <- c()
for(i in 1:length(url_SingleGame)){
Game_singlePage <-read_html(url_SingleGame[i])
data_forGameDeveloper <-c(data_forGameDeveloper, Game_singlePage %>%
html_nodes(., xpath = xpath_GAme_developer)%>%
html_text)
}
for(i in 1:5){
Game_singlePage <-read_html(url_SingleGame[i])
data_forGameDeveloper <-c(data_forGameDeveloper, Game_singlePage %>%
html_nodes(., xpath = xpath_GAme_developer)%>%
html_text)
}
data_forGameDeveloper
Sys.setlocale(category = "LC_ALL", locale = "cht")
url <- "https://steamdb.info/graph/"
xpathSteamDB <-paste(paste("//td[", c(2:6), sep = ""), "]", sep = "")
steamdbData<-data.frame()
# get data from Steamdb
dataurl <-read_html(url)
data_forSteamdb <- dataurl %>%
html_nodes(., xpath = xpathSteamDB[1])%>%
html_text
steamdbData <- cbind(data_forSteamdb)
for(i in 1:length(xpathSteamDB) ){
data_forSteamdb <- dataurl %>%
html_nodes(., xpath = xpathSteamDB[i+1])%>%
html_text
steamdbData <- cbind(steamdbData, data_forSteamdb)
}
steamdbData <- as.data.frame(steamdbData)
names(steamdbData) <- c("id", "Name", "currentPlayer", "24Hpeak","allTimepeak")
# get developer data
url_SingleGame <-paste(
paste("https://steamdb.info/app/", steamdbData$id, sep = ""),
"/",
sep = ""
)
# every Game Developer Xpath
xpath_GAme_developer <- "//table[@class='table table-bordered table-hover table-dark']/tbody/tr[4]/td[2]"
data_forGameDeveloper <- c()
for(i in 1:10){   #length(url_SingleGame)
Game_singlePage <-read_html(url_SingleGame[i])
data_forGameDeveloper <-c(data_forGameDeveloper, Game_singlePage %>%
html_nodes(., xpath = xpath_GAme_developer)%>%
html_text)
}
data_forGameDeveloper
data_forGameDeveloper <- c()
for(i in 2:100){   #length(url_SingleGame)
Game_singlePage <-read_html(url_SingleGame[i])
data_forGameDeveloper <-c(data_forGameDeveloper, Game_singlePage %>%
html_nodes(., xpath = xpath_GAme_developer)%>%
html_text)
}
data_forGameDeveloper
library(kriging)
library(magrittr)
library(httr)
library(rvest)
library(stringr)
library(ggplot2)
library(plotly)
library(leaflet)
library(reshape2)
library(knitr)
library(shiny)
library(RJSONIO)
library(RCurl)
library(jsonlite)
library(httr)
library(XML)
library(stringr)
library(raster)
setwd('c:/R_Application/earthquake')
Sys.setlocale(category = "LC_ALL", locale = "cht")
CSV_earthquakesData <- read.csv("database.csv")
eqlocation <- data.frame(Date=CSV_earthquakesData$Date,
lng=as.numeric(CSV_earthquakesData$Longitude),
lat=as.numeric(CSV_earthquakesData$Latitude))
eqWorldmap <- leaflet(data = eqlocation)%>%
addProviderTiles("Esri.WorldImagery") %>%
addCircles(lng = ~eqlocation$lng,
lat = ~eqlocation$lat,
opacity= 0,
weight= 10,
radius=30,
fillOpacity = 1,
stroke=FALSE,
color='red')
eqperYear <- data.frame(type=CSV_earthquakesData$Type,
date= as.Date(CSV_earthquakesData$Date, "%m/%d/%Y"),
lng=as.numeric(CSV_earthquakesData$Longitude),
lat=as.numeric(CSV_earthquakesData$Latitude),
M=as.numeric(CSV_earthquakesData$Magnitude))
eqperYear <- cbind(eqperYear, Year = format(eqperYear$date, format="%Y") )
Every_year <-data.frame(year = format(
as.Date(
names(
summary(eqperYear$Year)
), "%Y"), format="%Y"),
sum =as.numeric(summary(eqperYear$Year)))
Every_year_plotly <- plot_ly(data = Every_year,
x = Every_year$year,
y = Every_year$sum,
type = "scatter",
mode = "markers+lines"
)
Every_year_plotly
Every_year_plotly <- plot_ly(data = Every_year,
x = Every_year$year,
y = Every_year$sum,
type = "bar",
mode = "markers+lines"
)
Every_year_plotly
Every_year_plotly <- plot_ly(data = Every_year,
x = Every_year$year,
y = Every_year$sum,
type = "bar"
)
Every_year_plotly
View(eqperYear)
View(Every_year)
summary(eqperYear$type)
type <- names(summary(eqperYear$type))
type
TypeSum <- as.numeric(summary(eqperYear$type))
TypeSum
typeSumDataframe <- data.frame(type, TypeSum)
View(typeSumDataframe)
EQ <- subset(eqperYear, eqperYear$type == "Earthquake")
View(EQ)
NuclearExplosion <-subset(eqperYear, eqperYear$type == "Nuclear Explosion")
View(NuclearExplosion)
View(NuclearExplosion)
NEmap <- leaflet(data = NuclearExplosion) %>%
setView(lng=-116.4557, lat = 37.29533) %>%
addProviderTiles("Esri.WorldImagery") %>%
addCircleMarkers(lng = ~NuclearExplosion$lng,
lat = ~NuclearExplosion$lat)
NEmap <- leaflet(data = NuclearExplosion) %>%
setView(lng=-116.4557, lat = 37.29533, zoom=10) %>%
addProviderTiles("Esri.WorldImagery") %>%
addCircleMarkers(lng = ~NuclearExplosion$lng,
lat = ~NuclearExplosion$lat)
NEmap
NEmap <- leaflet(data = NuclearExplosion) %>%
setView(lng=-116.4557, lat = 37.29533, zoom=5) %>%
addProviderTiles("Esri.WorldImagery") %>%
addCircle(lng = ~NuclearExplosion$lng,
lat = ~NuclearExplosion$lat,
color = "reds")
NEmap
NEmap <- leaflet(data = NuclearExplosion) %>%
setView(lng=-116.4557, lat = 37.29533, zoom=5) %>%
addProviderTiles("Esri.WorldImagery") %>%
addCircles(lng = ~NuclearExplosion$lng,
lat = ~NuclearExplosion$lat,
color = "reds")
NEmap
NEmap <- leaflet(data = NuclearExplosion) %>%
setView(lng=-116.4557, lat = 37.29533, zoom=5) %>%
addProviderTiles("Esri.WorldImagery") %>%
addCircles(lng = ~NuclearExplosion$lng,
lat = ~NuclearExplosion$lat,
color = "red",
opacity= 0,
weight= 10,
radius=30,
fillOpacity = 1)
NEmap
NEmap <- leaflet(data = NuclearExplosion) %>%
setView(lng=-116.4557, lat = 37.29533, zoom=5) %>%
addProviderTiles("Esri.WorldImagery") %>%
addCircles(lng = ~NuclearExplosion$lng,
lat = ~NuclearExplosion$lat,
color = "red",
opacity= 0,
weight= 30,
radius=60,
fillOpacity = 1)
NEmap
NEmap <- leaflet(data = NuclearExplosion) %>%
setView(lng=-116.4557, lat = 37.29533, zoom=5) %>%
addProviderTiles("Esri.WorldImagery") %>%
addCircleMarkers(lng = ~NuclearExplosion$lng,
lat = ~NuclearExplosion$lat,
color = "red",
opacity= 0,
weight= 30,
radius=60,
fillOpacity = 1)
NEmap
NEmap <- leaflet(data = NuclearExplosion) %>%
# setView(lng=-116.4557, lat = 37.29533, zoom=5) %>%
addProviderTiles("Esri.WorldImagery") %>%
addCircleMarkers(lng = ~NuclearExplosion$lng,
lat = ~NuclearExplosion$lat,
color = "red",
opacity= 0,
weight= 30,
radius=10,
fillOpacity = 1)
NEmap
View(NuclearExplosion)
View(NuclearExplosion)
NE_Every_year <-data.frame(year = format(
as.Date(
names(
summary(NuclearExplosion$Year)
), "%Y"), format="%Y"),
sum =as.numeric(summary(NuclearExplosion$Year)))
View(NE_Every_year)
NE_perY_plotly <- plot_ly(data = NE_Every_year,
x = NE_Every_year$year,
y = NE_Every_year$sum,
type = "bar",
color = "red")
NE_perY_plotly
View(eqperYear)
