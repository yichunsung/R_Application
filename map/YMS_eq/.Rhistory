title="CO2 Conc.")
CO2ConcMap2
CO2ConcMap2 <- leaflet(data = krigingDataFrame) %>%
setView(lng=121.5812,
lat=25.20781,
zoom = 14) %>%
addProviderTiles("Esri.WorldImagery") %>%
addCircles(lng = ~krigingDataFrame$x,
lat = ~krigingDataFrame$y,
opacity= 0,
weight = 1000,
fillOpacity = 0.1,
radius =100,
color=~quantilePalette(krigingDataFrame$pred)
)%>%
addCircles(lng = ~CO2ConcSF$lng,
lat = ~CO2ConcSF$lat,
opacity= 0,
weight= 10,
radius=30,
fillOpacity = 1,
stroke=FALSE)%>%
addLegend(position="bottomright",
pal = quantilePalette,
values = ~krigingDataFrame$pred,
opacity = 1,
title="CO2 Conc.")
CO2ConcMap2
teskde <- bkde2D(data.frame(CO2ConcSF$lng, CO2ConcSF$lat),
bandwidth=c(0.02, .002), gridsize = c(100,100))
testCL <- contourLines(teskde$x1 , teskde$x2 ,teskde$fhat)
testLEVS <- as.factor(sapply(testCL, `[[`, "level"))
testNLEV <- length(levels(testLEVS))
## CONVERT CONTOUR LINES TO POLYGONS
testpgons <- lapply(1:length(testCL), function(i)
Polygons(list(Polygon(cbind(testCL[[i]]$x, testCL[[i]]$y))), ID=i))
testspgons = SpatialPolygons(testpgons)
leaflet(testspgons) %>% addProviderTiles("Esri.WorldImagery") %>%
addPolygons(color = heat.colors(testNLEV, NULL)[testLEVS])
teskde <- bkde2D(data.frame(CO2ConcSF$lng, CO2ConcSF$lat),
bandwidth=c(0.002, .002), gridsize = c(600,600))
testCL <- contourLines(teskde$x1 , teskde$x2 ,teskde$fhat)
## EXTRACT CONTOUR LINE LEVELS
testLEVS <- as.factor(sapply(testCL, `[[`, "level"))
testNLEV <- length(levels(testLEVS))
## CONVERT CONTOUR LINES TO POLYGONS
testpgons <- lapply(1:length(testCL), function(i)
Polygons(list(Polygon(cbind(testCL[[i]]$x, testCL[[i]]$y))), ID=i))
testspgons = SpatialPolygons(testpgons)
leaflet(testspgons) %>% addProviderTiles("Esri.WorldImagery") %>%
addPolygons(color = heat.colors(testNLEV, NULL)[testLEVS])
CO2ConcPlotly <- plot_ly(krigingDataFrame, z = ~krigingDataFrame$pred, x = ~krigingDataFrame$x, y = ~krigingDataFrame$y, colors = colorRamp(c("lightblue", "red")), type = "heatmap")
CO2ConcPlotly
View(krigingDataFrame)
krigingDataFrame<-subset(krigingDataFrame, krigingDataFrame$y<=25.222 && krigingDataFrame$x>=121.5859)
CO2ConcMap2 <- leaflet(data = krigingDataFrame) %>%
setView(lng=121.5812,
lat=25.20781,
zoom = 14) %>%
addProviderTiles("Esri.WorldImagery") %>%
addCircles(lng = ~krigingDataFrame$x,
lat = ~krigingDataFrame$y,
opacity= 0,
weight = 1000,
fillOpacity = 0.1,
radius =100,
color=~quantilePalette(krigingDataFrame$pred)
)%>%
addCircles(lng = ~CO2ConcSF$lng,
lat = ~CO2ConcSF$lat,
opacity= 0,
weight= 10,
radius=30,
fillOpacity = 1,
stroke=FALSE)%>%
addLegend(position="bottomright",
pal = quantilePalette,
values = ~krigingDataFrame$pred,
opacity = 1,
title="CO2 Conc.")
CO2ConcMap2
View(krigingDataFrame)
krigingDataFrame<-subset(krigingDataFrame, krigingDataFrame$y<=25.222 & krigingDataFrame$x>=121.5859)
krigingDataFrame <- krigingList$map
krigingDataFrame<-subset(krigingDataFrame, krigingDataFrame$y<=25.222 & krigingDataFrame$x>=121.5859)
krigingDataFrame <- krigingList$map
krigingDataFrame<-subset(krigingDataFrame, krigingDataFrame$y<=25.222 & krigingDataFrame$x>=121.5859)
CO2ConcMap2 <- leaflet(data = krigingDataFrame) %>%
setView(lng=121.5812,
lat=25.20781,
zoom = 14) %>%
addProviderTiles("Esri.WorldImagery") %>%
addCircles(lng = ~krigingDataFrame$x,
lat = ~krigingDataFrame$y,
opacity= 0,
weight = 1000,
fillOpacity = 0.1,
radius =100,
color=~quantilePalette(krigingDataFrame$pred)
)%>%
addCircles(lng = ~CO2ConcSF$lng,
lat = ~CO2ConcSF$lat,
opacity= 0,
weight= 10,
radius=30,
fillOpacity = 1,
stroke=FALSE)%>%
addLegend(position="bottomright",
pal = quantilePalette,
values = ~krigingDataFrame$pred,
opacity = 1,
title="CO2 Conc.")
CO2ConcMap2
krigingDataFrame <- krigingList$map
krigingDataFrame<-subset(krigingDataFrame, krigingDataFrame$y<=25.222 || krigingDataFrame$x>=121.5859)
krigingDataFrame<-subset(krigingDataFrame, krigingDataFrame$y<=25.222 | krigingDataFrame$x>=121.5859)
krigingDataFrame <- krigingList$map
krigingDataFrame<-subset(krigingDataFrame, krigingDataFrame$y<=25.222 | krigingDataFrame$x>=121.5859)
CO2ConcPlotly <- plot_ly(krigingDataFrame, z = ~krigingDataFrame$pred, x = ~krigingDataFrame$x, y = ~krigingDataFrame$y, colors = colorRamp(c("lightblue", "red")), type = "heatmap")
CO2ConcPlotly
CO2ConcMap2 <- leaflet(data = krigingDataFrame) %>%
setView(lng=121.5812,
lat=25.20781,
zoom = 14) %>%
addProviderTiles("Esri.WorldImagery") %>%
addCircles(lng = ~krigingDataFrame$x,
lat = ~krigingDataFrame$y,
opacity= 0,
weight = 1000,
fillOpacity = 0.1,
radius =100,
color=~quantilePalette(krigingDataFrame$pred)
)%>%
addCircles(lng = ~CO2ConcSF$lng,
lat = ~CO2ConcSF$lat,
opacity= 0,
weight= 10,
radius=30,
fillOpacity = 1,
stroke=FALSE)%>%
addLegend(position="bottomright",
pal = quantilePalette,
values = ~krigingDataFrame$pred,
opacity = 1,
title="CO2 Conc.")
CO2ConcMap2
Sys.setlocale(category = "LC_ALL", locale = "cht")
xpathp <- "//td[3]"
url <- "https://steamdb.info/graph/"
for (i in 1:lengthDate){
# doc <- read_html(urls)
datadoc <-read_html(url)# read_html(as.vector(date_dataFrame$urldate[1]))
data <- datadoc %>%
html_nodes(., xpath = xpathp)%>%
html_text
}
for (i in 1:100){
# doc <- read_html(urls)
datadoc <-read_html(url)# read_html(as.vector(date_dataFrame$urldate[1]))
data <- datadoc %>%
html_nodes(., xpath = xpathp)%>%
html_text
}
library(kriging)
library(magrittr)
library(httr)
library(rvest)
library(stringr)
library(ggplot2)
library(plotly)
library(leaflet)
library(reshape2)
library(knitr)
library(shiny)
library(RJSONIO)
library(RCurl)
library(jsonlite)
library(httr)
library(XML)
library(stringr)
library(raster)
for (i in 1:100){
# doc <- read_html(urls)
datadoc <-read_html(url)# read_html(as.vector(date_dataFrame$urldate[1]))
data <- datadoc %>%
html_nodes(., xpath = xpathp)%>%
html_text
}
# doc <- read_html(urls)
datadoc <-read_html(url)# read_html(as.vector(date_dataFrame$urldate[1]))
data <- datadoc %>%
html_nodes(., xpath = xpathp)%>%
html_text
data
dataurl <-read_html(url)
data_gameName <- datadoc %>%
html_nodes(., xpath = xpath_GameName)%>%
html_text
xpath_GameName <- "//td[3]"
data_gameName <- datadoc %>%
html_nodes(., xpath = xpath_GameName)%>%
html_text
no <- c(2:6)
xpathall <-paste(paste(xpath_1, no, sep = ""), xpath_2, sep = "")
xpath_1 <- "/td["
xpath_2 <- "]"
xpathall <-paste(paste(xpath_1, no, sep = ""), xpath_2, sep = "")
xpathall
xpath_1 <- "//td["
xpathall <-paste(paste(xpath_1, no, sep = ""), xpath_2, sep = "")
xpathall[1]
xpathall[2]
length(xpathall)
xpathall <-paste(paste(xpath_1, c(2:6), sep = ""), xpath_2, sep = "")
steamdbData<-data.frame()
steamdbData<- cbind(steamdbData, data_gameName)
testdataframe <- data.frame[1](data_gameName)
testdataframe <- data.frame[1=data_gameName]
testdataframe <- data.frame[.,data_gameName]
testdataframe <- data.frame[,data_gameName]
steamdbData[1]<-data_gameName
steamdbData[1]
steamdbData[0]
steamdbData[0] <- data_gameName
steamdbData = rbind(steamdbData)
steamdbData = rbind(data_gameName)
View(steamdbData)
steamdbData = cbind(data_gameName)
View(steamdbData)
steamdbData <- cbind(data_gameName)
View(steamdbData)
steamdbData<-data.frame()
steamdbData <- cbind(data_gameName)
View(steamdbData)
steamdbData<-data.frame()
steamdbData<-data.frame()
for(i in 1:length(xpathall) ){
data_forSteamdb <- datadoc %>%
html_nodes(., xpath = xpathall[i])%>%
html_text
steamdbData <- cbind(data_forSteamdb)
}
names(steamdbData) <- c("id", "Name", "currentPlayer", "24Hpeak","allTimepeak")
View(steamdbData)
steamdbData<-data.frame()
steamdbData <- cbind(data_forSteamdb)
steamdbData<-data.frame()
data_forSteamdb <- datadoc %>%
html_nodes(., xpath = xpathall[1])%>%
html_text
steamdbData <- cbind(data_forSteamdb)
for(i in 1:length(xpathall) ){
data_forSteamdb <- datadoc %>%
html_nodes(., xpath = xpathall[i+1])%>%
html_text
steamdbData <- cbind(steamdbData, data_forSteamdb)
}
names(steamdbData) <- c("id", "Name", "currentPlayer", "24Hpeak","allTimepeak")
View(steamdbData)
Sys.setlocale(category = "LC_ALL", locale = "cht")
url <- "https://steamdb.info/graph/"
xpath_1 <- "//td["
xpath_2 <- "]"
xpathall <-paste(paste(xpath_1, c(2:6), sep = ""), xpath_2, sep = "")
dataurl <-read_html(url)
steamdbData<-data.frame()
data_forSteamdb <- dataurl %>%
html_nodes(., xpath = xpathall[1])%>%
html_text
steamdbData <- cbind(data_forSteamdb)
for(i in 1:length(xpathall) ){
data_forSteamdb <- dataurl %>%
html_nodes(., xpath = xpathall[i+1])%>%
html_text
steamdbData <- cbind(steamdbData, data_forSteamdb)
}
names(steamdbData) <- c("id", "Name", "currentPlayer", "24Hpeak","allTimepeak")
View(steamdbData)
Sys.setlocale(category = "LC_ALL", locale = "cht")
url <- "https://steamdb.info/graph/"
xpathSteamDB <-paste(paste("//td[", c(2:6), sep = ""), "]", sep = "")
steamdbData<-data.frame()
# get data from Steamdb
dataurl <-read_html(url)
data_forSteamdb <- dataurl %>%
html_nodes(., xpath = xpathSteamDB[1])%>%
html_text
steamdbData <- cbind(data_forSteamdb)
for(i in 1:length(xpathSteamDB) ){
data_forSteamdb <- dataurl %>%
html_nodes(., xpath = xpathSteamDB[i+1])%>%
html_text
steamdbData <- cbind(steamdbData, data_forSteamdb)
}
names(steamdbData) <- c("id", "Name", "currentPlayer", "24Hpeak","allTimepeak")
urlSingleGame <- "https://steamdb.info/app/730/"
xpath_price_line <-  "//tr/td[@class='price-line']"
SingleGamedataurl <-read_html(urlSingleGame)
Single_game_data_forSteamdb <- SingleGamedataurl %>%
html_nodes(., xpath = xpath_price_line)%>%
html_text
Single_game_data_forSteamdb
is.data.frame(steamdbData)
as.data.frame(steamdbData)
steamdbData <- as.data.frame(steamdbData)
View(steamdbData)
View(steamdbData)
names(steamdbData) <- c("id", "Name", "currentPlayer", "24Hpeak","allTimepeak")
url_SingleGame <-paste(
paste("https://steamdb.info/app/730/", steamdbData$id, sep = ""),
"/",
sep = ""
)
url_SingleGame
url_SingleGame <-paste(
paste("https://steamdb.info/app/", steamdbData$id, sep = ""),
"/",
sep = ""
)
url_SingleGame <-paste(
paste("https://steamdb.info/app/", steamdbData$id, sep = ""),
"/",
sep = ""
)
url_SingleGame
url_SingleGame[1]
url_SingleGame[2]
Game_singlePage <-read_html(url_SingleGame[1])
data_forGameDeveloper <- Game_singlePage %>%
html_nodes(., xpath = xpath_GAme_developer)%>%
html_text
xpath_GAme_developer <- "//table[@class='table table-bordered table-hover table-dark']/tbody/tr[4]/td[2]"
Game_singlePage <-read_html(url_SingleGame[1])
data_forGameDeveloper <- Game_singlePage %>%
html_nodes(., xpath = xpath_GAme_developer)%>%
html_text
Game_singlePage
data_forGameDeveloper
Game_singlePage <-read_html(url_SingleGame[2])
data_forGameDeveloper <- Game_singlePage %>%
html_nodes(., xpath = xpath_GAme_developer)%>%
html_text
Game_singlePage2 <-read_html(url_SingleGame[3])
data_forGameDeveloper <- Game_singlePage %>%
html_nodes(., xpath = xpath_GAme_developer)%>%
html_text
a <- 1
a <- ()
a <- c()
a <- c(a,1)
a <- c(a,2)
data_forGameDeveloper <- c()
for(i in 1:length(url_SingleGame)){
Game_singlePage <-read_html(url_SingleGame[i])
data_forGameDeveloper <-c(data_forGameDeveloper, Game_singlePage %>%
html_nodes(., xpath = xpath_GAme_developer)%>%
html_text)
}
for(i in 1:5){
Game_singlePage <-read_html(url_SingleGame[i])
data_forGameDeveloper <-c(data_forGameDeveloper, Game_singlePage %>%
html_nodes(., xpath = xpath_GAme_developer)%>%
html_text)
}
data_forGameDeveloper
Sys.setlocale(category = "LC_ALL", locale = "cht")
url <- "https://steamdb.info/graph/"
xpathSteamDB <-paste(paste("//td[", c(2:6), sep = ""), "]", sep = "")
steamdbData<-data.frame()
# get data from Steamdb
dataurl <-read_html(url)
data_forSteamdb <- dataurl %>%
html_nodes(., xpath = xpathSteamDB[1])%>%
html_text
steamdbData <- cbind(data_forSteamdb)
for(i in 1:length(xpathSteamDB) ){
data_forSteamdb <- dataurl %>%
html_nodes(., xpath = xpathSteamDB[i+1])%>%
html_text
steamdbData <- cbind(steamdbData, data_forSteamdb)
}
steamdbData <- as.data.frame(steamdbData)
names(steamdbData) <- c("id", "Name", "currentPlayer", "24Hpeak","allTimepeak")
# get developer data
url_SingleGame <-paste(
paste("https://steamdb.info/app/", steamdbData$id, sep = ""),
"/",
sep = ""
)
# every Game Developer Xpath
xpath_GAme_developer <- "//table[@class='table table-bordered table-hover table-dark']/tbody/tr[4]/td[2]"
data_forGameDeveloper <- c()
for(i in 1:10){   #length(url_SingleGame)
Game_singlePage <-read_html(url_SingleGame[i])
data_forGameDeveloper <-c(data_forGameDeveloper, Game_singlePage %>%
html_nodes(., xpath = xpath_GAme_developer)%>%
html_text)
}
data_forGameDeveloper
data_forGameDeveloper <- c()
for(i in 2:100){   #length(url_SingleGame)
Game_singlePage <-read_html(url_SingleGame[i])
data_forGameDeveloper <-c(data_forGameDeveloper, Game_singlePage %>%
html_nodes(., xpath = xpath_GAme_developer)%>%
html_text)
}
data_forGameDeveloper
Time
library(rgeos)
library(plyr)
library(scales)
library(kriging)
library(magrittr)
library(httr)
library(rvest)
library(stringr)
library(ggplot2)
library(plotly)
library(leaflet)
library(reshape2)
library(knitr)
library(shiny)
library(RJSONIO)
library(RCurl)
library(jsonlite)
library(httr)
library(XML)
library(stringr)
library(raster)
library(maptools)
setwd('c://testDOC')
Sys.setlocale(category = "LC_ALL", locale = )
# read .csv file
fileList <- list.files(path = "C://testDOC/data/", pattern="*.csv")
for (i in 1:length(fileList)){
assign(fileList[i],
read.csv(paste("C://testDOC/data/", fileList[i], sep=''))
)}
# ChihNan = "指南宮站"; Taipei = "台北站"; Xinyi = "信義站"; YMS = "陽明山站";
YMSList <- c(nrow(YMS_INT_1.csv), nrow(YMS_INT_2.csv), nrow(YMS_INT_3.csv), nrow(YMS_INT_4.csv))
TaipeiList <- c(nrow(Taipei_INT_1.csv), nrow(Taipei_INT_2.csv), nrow(Taipei_INT_3.csv), nrow(Taipei_INT_4.csv), nrow(Taipei_INT_5.csv))
XinyiList <- c(nrow(Xinyi_INT_1.csv), nrow(`Xinyi _INT_2.csv`), nrow(`Xinyi _INT_3.csv`), nrow(Xinyi_INT_4.csv))
ChihNanList <- c(nrow(ChihNan_INT_1.csv), nrow(ChihNan_INT_2.csv), nrow(ChihNan_INT_3.csv), nrow(ChihNan_INT_4.csv))
Yinty<-c()
for(i in 1:4){
INT <- rep(i, times =as.numeric(YMSList[[i]]))
Yinty <- c(Yinty, INT)
}
Tinty <- c()
for(i in 1:5){
INT <- rep(i, times =as.numeric(TaipeiList[[i]]))
Tinty <- c(Tinty, INT)
}
Xinty <- c()
for(i in 1:4){
INT <- rep(i, times =as.numeric(XinyiList[[i]]))
Xinty <- c(Xinty, INT)
}
Cinty <- c()
for(i in 1:4){
INT <- rep(i, times =as.numeric(ChihNanNanList[[i]]))
Cinty <- c(Cinty, INT)
}
YMS_EQ_list <- rbind(YMS_INT_1.csv, YMS_INT_2.csv, YMS_INT_3.csv, YMS_INT_4.csv)
YMS_EQ_list <- cbind(YMS_EQ_list, Yinty)
Taipei_EQ_list <- rbind(Taipei_INT_1.csv, Taipei_INT_2.csv, Taipei_INT_3.csv, Taipei_INT_4.csv, Taipei_INT_5.csv)
Taipei_EQ_list <- cbind(Taipei_EQ_list, Tinty)
Xinyi_EQ_List <- rbind(Xinyi_INT_1.csv, `Xinyi _INT_2.csv`, `Xinyi _INT_3.csv`, Xinyi_INT_4.csv)
Xinyi_EQ_List <- cbind(Xinyi_EQ_List, Xinty)
ChihNan_EQ_list <- rbind(ChihNan_INT_1.csv, ChihNan_INT_2.csv, ChihNan_INT_3.csv, ChihNan_INT_4.csv)
ChihNan_EQ_list <- cbind(ChihNan_EQ_list, Cinty)
# two data.frame inner join
EQ_list <- merge(YMS_EQ_list, Taipei_EQ_list, by.x='地震時間', by.y = '地震時間')
# 多data.frame full join
EQ_list <- Reduce(function(x, y) merge(x, y, all=TRUE), list(YMS_EQ_list, Taipei_EQ_list, Xinyi_EQ_List, ChihNan_EQ_list))
write.csv(EQ_list, "C://testDOC/tp_eqList.csv")
names(EQ_list) <- c("id", "time", "lng", "lat", "depth", "ML", "epicenter", "YMS_int", "Taipei_int", "Xinyi_int", "ChihNan_int")
Time <- as.Date(EQ_list$time, "%Y/%m/%d")
library(leaflet)
Time
View(EQ_list)
View(EQ_list)
names(EQ_list) <- c("id", "time", "lng", "lat", "depth", "ML", "epicenter", "YMS_int", "Taipei_int", "Xinyi_int", "ChihNan_int")
View(EQ_list)
ChihNan_EQ_list <- rbind(ChihNan_INT_1.csv, ChihNan_INT_2.csv, ChihNan_INT_3.csv, ChihNan_INT_4.csv)
ChihNan_EQ_list <- cbind(ChihNan_EQ_list, Cinty)
View(ChihNan_EQ_list)
EQ_list <- Reduce(function(x, y) merge(x, y, all=TRUE), list(YMS_EQ_list, Taipei_EQ_list, Xinyi_EQ_List, ChihNan_EQ_list))
View(EQ_list)
View(ChihNan_EQ_list)
ChihNanList <- c(nrow(ChihNan_INT_1.csv), nrow(ChihNan_INT_2.csv), nrow(ChihNan_INT_3.csv), nrow(ChihNan_INT_4.csv))
Cinty <- c()
for(i in 1:4){
INT <- rep(i, times =as.numeric(ChihNanNanList[[i]]))
Cinty <- c(Cinty, INT)
}
Cinty <- c()
for(i in 1:4){
INT <- rep(i, times =as.numeric(ChihNanList[[i]]))
Cinty <- c(Cinty, INT)
}
ChihNan_EQ_list <- rbind(ChihNan_INT_1.csv, ChihNan_INT_2.csv, ChihNan_INT_3.csv, ChihNan_INT_4.csv)
ChihNan_EQ_list <- cbind(ChihNan_EQ_list, Cinty)
# two data.frame inner join
EQ_list <- Reduce(function(x, y) merge(x, y, all=TRUE), list(YMS_EQ_list, Taipei_EQ_list, Xinyi_EQ_List, ChihNan_EQ_list))
names(EQ_list) <- c("id", "time", "lng", "lat", "depth", "ML", "epicenter", "YMS_int", "Taipei_int", "Xinyi_int", "ChihNan_int")
View(EQ_list)
Time <- as.Date(EQ_list$time, "%Y/%m/%d")
Time
View(EQ_list)
write.csv(EQ_list, "C://testDOC/tp_eqList.csv")
EQ_list <- read.csv("tp_eqList.csv")
